<%- include ("includes/header") %>

<link rel="stylesheet" type="text/css" href="/public/css/chat.css" />

<section>
	<div class="gap gray-bg">

		<div class="container">
			<div class="row">
				<div class="col-md-12">
					<div class="central-meta">
<!--
						<button type="button" class="mtr-btn" data-toggle="modal" data-target="#createGroupModal">
							<span>Create group</span>
						</button>

						<br /><br />
-->
						<div class="messaging">
							<div class="inbox_msg">
								<div class="inbox_people">
									<div class="headind_srch">
										<div class="recent_heading">
											<h4>Contactos</h4>
										</div>

										 <div class="srch_bar">
											<div class="stylish-input-group">
												<input type="text" class="search-bar"  placeholder="Search" id="input-search-friend" />
												<span class="input-group-addon">
													<button type="button" onclick="searchFriend()">
														<i class="fa fa-search" aria-hidden="true"></i>
													</button>
												</span>
											</div>
										</div> 
									</div>

									<div class="inbox_chat">

										<div id="sponsoredLayout" style="margin: 20px;"></div>

										<div id="friends"></div>

										<!-- <div class="chat_list">
											<div class="chat_people">
												<div class="chat_img">
													<img src="https://ptetutorials.com/images/user-profile.png" alt="sunil" />
												</div>

												<div class="chat_ib">
													<h5>Sunil Rajput <span class="chat_date">Dec 25</span></h5>
													<p>Test, which is a new approach to have all solutions astrology under one roof.</p>
												</div>
											</div>
										</div> -->

									</div>
								</div>

								<div class="mesgs">

									<div style="display: none; margin-bottom: 10px;" id="section-invite-member-modal" class="pull-right">
										<a href="#" id="qr-code-link" target="_blank" class="btn btn-link">QR code</a>

										<button type="button" class="mtr-btn" style="display: none;" onclick="deleteGroup()" id="btn-delete-group">
											<span>Delete group</span>
										</button>

										<button type="button" class="mtr-btn" data-toggle="modal" data-target="#viewMembersModal" onclick="fetchGroupMembers()">
											<span>View members</span>
										</button>

										<button type="button" class="mtr-btn" data-toggle="modal" data-target="#inviteMemberModal">
											<span>Invite member</span>
										</button>
									</div>

									<div class="msg_history" id="msg_history" style="clear: both;">

									</div>

									<div class="type_msg">
										<div class="input_msg_write">
											<form method="post" onsubmit="sendMessage()" enctype="multipart/form-data" style="display: contents;" id="form-send-message">
												<input type="text" name="message" class="write_msg" id="message" placeholder="Escribe un mensaje..." />

												<div class="attachments" style="display: flex; padding-right: 0px; padding-left: 0px; border: none;">
													<ul>
														<!-- <li>
															<i class="fa fa-image"></i>

															<label class="fileContainer">
																<input type="file" name="images" multiple accept="image/*" onchange="previewAttachedImages(this)" />
															</label>
														</li>

														<li>
															<i class="fa fa-video-camera"></i>

															<label class="fileContainer">
																<input type="file" name="videos" multiple accept="video/*" onchange="previewAttachedVideos(this)" />
															</label>
														</li> -->

														<li>
															<input type="file" name="files" multiple />
														</li>

														<li>
															<i class="fa fa-microphone" id="icon-record-audio" onclick="recordAudio()" style="cursor: pointer;"></i>
														</li>
													</ul>
												</div>
												
												<button class="msg_send_btn" name="submit" type="submit">
													<i class="fa fa-paper-plane-o" aria-hidden="true"></i>
												</button>
											</form>
 
											<ul style="list-style-type: none;">
												<li>
													<div id="preview-attached-images" style="display: flex;"></div>
												</li>

												<li>
													<div id="preview-attached-videos" style="display: flex;"></div>
												</li>
											</ul>
										</div>
									</div>
								</div>
							</div>

					    </div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<div class="modal" id="viewImageModal" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog" style="max-width: 1000px;">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Attachment</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>

			<div class="modal-body"></div>
		</div>
	</div>
</div>

<!-- Modal -->
<div class="modal" id="createGroupModal">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Create group</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>

			<div class="modal-body">
				<form id="form-create-group" onsubmit="return createGroup()" enctype="multipart/form-data">
					<div class="form-group">
						<label>Cover photo</label>
						<input type="file" name="coverPhoto" accept="image/*" required />
						<i class="mtrl-select"></i>

						<br><br>
					</div>

					<div class="form-group">
						<input type="text" name="name" required />
						<label class="control-label">Group Name</label>
						<i class="mtrl-select"></i>

						<br><br>
					</div>
				</form>
			</div>

			<div class="modal-footer">
				<button type="button" class="mtr-btn" data-dismiss="modal">
					<span>Close</span>
				</button>

				<button type="submit" name="submit" class="mtr-btn" form="form-create-group">
					<span>Create group</span>
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal -->
<div class="modal" id="inviteMemberModal">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Invite member</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>

			<div class="modal-body">
				<form id="form-invite-member" onsubmit="return inviteMember(this)">
					<div class="form-group">
						<input type="email" name="email" required />
						<label class="control-label">Enter email</label>
						<i class="mtrl-select"></i>

						<br><br>
					</div>
				</form>
			</div>

			<div class="modal-footer">
				<button type="button" class="mtr-btn" data-dismiss="modal">
					<span>Close</span>
				</button>

				<button type="submit" name="submit" class="mtr-btn" form="form-invite-member">
					<span>Invite member</span>
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal -->
<div class="modal" id="viewMembersModal">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Members</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>

			<div class="modal-body">
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>Name</th>
							<th>Status</th>
							<th>Member since</th>
							<th>Actions</th>
						</tr>
					</thead>

					<tbody></tbody>
				</table>
			</div>

			<div class="modal-footer">
				<button type="button" class="mtr-btn" data-dismiss="modal">
					<span>Close</span>
				</button>
			</div>
		</div>
	</div>
</div>

<script>
	var isInbox = true;
	
	var selectedFriend = null
	var selectedGroup = null

	var friends = []
	var groups = []

	var attachedImages = [];
	var attachedVideos = [];

	let recorder = null

	function fetchGroupMembers() {
		if (selectedGroup == null) {
			swal("Error", "Please select a group.", "info")
			return
		}

		document.querySelector("#viewMembersModal tbody").innerHTML = ""

		const ajax = new XMLHttpRequest()
		ajax.open("POST", "/fetchGroupMembers", true)

		ajax.onreadystatechange = function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText)
					var response = JSON.parse(this.responseText)
					// console.log(response)

					if (response.status == "success") {
						let html = ""

						for (let a = 0; a < response.data.length; a++) {
							const member = response.data[a]
							html += renderGroupMemberInMembersList(member)
						}

						document.querySelector("#viewMembersModal tbody").innerHTML = html
					} else {
						swal("Error", response.message, "error")
					}
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		}

		const formData = new FormData()
		formData.append("accessToken", localStorage.getItem("accessToken"))
		formData.append("_id", selectedGroup._id)
		ajax.send(formData)
	}

	function deleteGroup() {
		if (selectedGroup == null) {
			swal("Error", "Please select a group.", "info")
			return
		}

		swal({
			title: "Delete group",
			text: "Are you sure you want to delete this group ?",
			icon: "warning",
			buttons: true,
			dangerMode: true,
		})
		.then(function (willDelete) {
			if (willDelete) {
				const ajax = new XMLHttpRequest()
				ajax.open("POST", "/deleteGroupChat", true)

				ajax.onreadystatechange = function() {
					if (this.readyState == 4) {
						if (this.status == 200) {
							// console.log(this.responseText)
							var response = JSON.parse(this.responseText)
							// console.log(response)

							if (response.status == "success") {
								document.getElementById("section-invite-member-modal").style.display = "none"
								document.getElementById("btn-delete-group").style.display = "none"
								document.getElementById("msg_history").innerHTML = ""
								
								// remove from friends list
								try {
									document.querySelector("div[data-group-id='" + selectedGroup._id + "']").remove()
								} catch (exp) {
									// 
								}
							} else {
								swal("Error", response.message, "error")
							}
						}

						if (this.status == 500) {
							console.log(this.responseText)
						}
					}
				}

				const formData = new FormData()
				formData.append("accessToken", localStorage.getItem("accessToken"))
				formData.append("_id", selectedGroup._id)
				ajax.send(formData)
			}
		})
	}

	function deleteMember(form) {
		event.preventDefault()

		if (selectedGroup == null) {
			swal("Error", "Please select a group.", "info")
			return
		}

		swal({
			title: "Remove member",
			text: "Are you sure you want to remove this member ?",
			icon: "warning",
			buttons: true,
			dangerMode: true,
		})
		.then(function (willDelete) {
			if (willDelete) {
				const ajax = new XMLHttpRequest()
				ajax.open("POST", "/deleteMemberFromGroupChat", true)

				ajax.onreadystatechange = function() {
					if (this.readyState == 4) {
						if (this.status == 200) {
							// console.log(this.responseText)
							var response = JSON.parse(this.responseText)
							// console.log(response)

							if (response.status == "success") {
								form.parentElement.parentElement.remove()
							} else {
								swal("Error", response.message, "error")
							}
						}

						if (this.status == 500) {
							console.log(this.responseText)
						}
					}
				}

				const formData = new FormData()
				formData.append("accessToken", localStorage.getItem("accessToken"))
				formData.append("_id", selectedGroup._id)
				formData.append("memberId", form._id.value)
				ajax.send(formData)
			}
		})
	}

	function acceptInvite(form) {
		event.preventDefault()

		if (selectedGroup == null) {
			swal("Error", "Please select a group.", "info")
			return
		}

		var ajax = new XMLHttpRequest()
		ajax.open("POST", "/acceptInviteGroupChat", true)

		ajax.onreadystatechange = function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText)
					var response = JSON.parse(this.responseText)
					// console.log(response)

					if (response.status == "success") {
						form.remove()
					} else {
						swal("Error", response.message, "error")
					}
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		}

		const formData = new FormData()
		formData.append("accessToken", localStorage.getItem("accessToken"))
		formData.append("_id", selectedGroup._id)
		formData.append("memberId", form._id.value)
		ajax.send(formData)
	}

	function sendVoiceNote(base64) {
		if (selectedFriend == null && selectedGroup == null) {
			swal("Error", "Please select a recipient.", "info")
			return
		}

		var ajax = new XMLHttpRequest()
		if (selectedFriend != null) {
			ajax.open("POST", "/sendVoiceNote", true)
		} else if (selectedGroup != null) {
			ajax.open("POST", "/sendVoiceNoteInGroupChat", true)
		}

		ajax.onreadystatechange = async function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText)
					var response = JSON.parse(this.responseText)
					// console.log(response)

					if (response.status == "success") {
						if (selectedFriend != null) {
							const derivedKey = await getDerivedKey(privateKey, publicKey)
							var html = await renderMessage(response.data, derivedKey)
						} else if (selectedGroup != null) {
							var html = renderGroupMessage(response.data)
						}

						document.getElementById("msg_history").innerHTML += html
						// document.body.scrollTop = document.getElementById("msg_history").scrollHeight

						// document.getElementById("preview-attached-images").innerHTML = ""
						// document.getElementById("preview-attached-videos").innerHTML = ""
					} else {
						swal("Error", response.message, "error")
					}
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		}

		const formData = new FormData()
		formData.append("accessToken", localStorage.getItem("accessToken"))
		if (selectedFriend != null) {
			formData.append("_id", selectedFriend._id)
		} else if (selectedGroup != null) {
			formData.append("_id", selectedGroup._id)
		}
		formData.append("base64", base64)
		ajax.send(formData)
	}

	const doRecordAudio = () => {
	  return new Promise(resolve => {
	    navigator.mediaDevices.getUserMedia({ audio: true })
	      .then(stream => {
	        const mediaRecorder = new MediaRecorder(stream);
	        const audioChunks = [];

	        mediaRecorder.addEventListener("dataavailable", event => {
	          audioChunks.push(event.data);
	        });

	        const start = () => {
	        	document.getElementById("icon-record-audio").className = "fa fa-stop-circle"
	        	document.getElementById("icon-record-audio").onclick = async function () {
	        		if (recorder != null) {
	        			const audio = await recorder.stop()

	        			const reader = new FileReader()
						reader.readAsDataURL(audio.audioBlob)
						reader.onloadend = function() {
							base64 = reader.result
							base64 = base64.split(',')[1]
							sendVoiceNote(base64)
						}
	        		}
	        	}
	          mediaRecorder.start()
	        };

	        const stop = () => {
	          return new Promise(resolve => {
	            mediaRecorder.addEventListener("stop", () => {
	            	document.getElementById("icon-record-audio").className = "fa fa-microphone"
	            	document.getElementById("icon-record-audio").onclick = async function () {
		        		recordAudio()
		        	}

	              const audioBlob = new Blob(audioChunks);
	              const audioUrl = URL.createObjectURL(audioBlob);
	              const audio = new Audio(audioUrl);
	              const play = () => {
	                audio.play();
	              };

	              resolve({ audioBlob, audioUrl, play });
	            });

	            mediaRecorder.stop();
	          });
	        };

	        resolve({ start, stop });
	      });
	  });
	};

	async function recordAudio() {
		if (selectedFriend == null && selectedGroup == null) {
			swal("Error", "Please select a recipient.", "info")
			return
		}

		navigator.permissions.query({name: 'microphone'})
			.then(function (permissionObj) {
				console.log(permissionObj.state)				
			})
			.catch((error) => {
				console.log('Got error :', error);
			})

		navigator.permissions.query({name: 'camera'})
			.then(function (permissionObj) {
				console.log(permissionObj.state);
			})
			.catch(function (error) {
				console.log('Got error :', error);
			})

		recorder = await doRecordAudio()
  		recorder.start()

		// const audio = await recorder.stop()
		// audio.play()
	}

	function inviteMember(form) {
		event.preventDefault()

		if (selectedGroup == null) {
			swal("Error", "Please select a group.", "error")
			return
		}

		form.submit.querySelector("span").innerHTML = "Cargando..."
		form.submit.setAttribute("disabled", "disabled")

		const ajax = new XMLHttpRequest()
		ajax.open("POST", "/inviteMemberForGroupChat", true)

		ajax.onreadystatechange = function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText)
					var response = JSON.parse(this.responseText)
					// console.log(response)

					form.submit.querySelector("span").innerHTML = "Invite member"
					form.submit.removeAttribute("disabled")

					if (response.status == "success") {
						swal("Invite member", response.message, "success")
						form.reset()
						$("#inviteMemberModal").modal("hide")
					} else {
						swal("Error", response.message, "error")
					}
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		}

		var formData = new FormData(form)
		formData.append("accessToken", localStorage.getItem("accessToken"))
		formData.append("_id", selectedGroup._id)
		ajax.send(formData)
	}

	function searchFriend() {
		const inputSearchFriend = document.getElementById("input-search-friend").value.toLowerCase()
		document.getElementById("friends").innerHTML = ""

		let html = ""
		for (var a = 0; a < friends.length; a++) {
			var data = friends[a]

			if (data.name.toLowerCase().includes(inputSearchFriend)) {
				html += renderSingleFriend(data)
			}
		}
		document.getElementById("friends").innerHTML = html
	}


	function previewAttachedImages(self) {
		document.getElementById("preview-attached-images").innerHTML = "";

		attachedImages = [];

        for (var a = 0; a < self.files.length; a++) {
        	var file = self.files[a];
            var fileReader = new FileReader();
 
            fileReader.onload = function (event) {
                document.getElementById("preview-attached-images").innerHTML += `<img src='` + event.target.result + `' class='attached-image' />`;

                attachedImages.push(event.target.result);
            };
 
            fileReader.readAsDataURL(file);
        }
	}

	function previewAttachedVideos(self) {
		document.getElementById("preview-attached-videos").innerHTML = "";

		attachedVideos = [];

        for (var a = 0; a < self.files.length; a++) {
        	var file = self.files[a];
            var fileReader = new FileReader();
 
            fileReader.onload = function (event) {
                document.getElementById("preview-attached-videos").innerHTML += `<video controls style="margin-bottom: 10px; width: 100%;" src='` + event.target.result + `'></video>`;

                attachedVideos.push(event.target.result);
            };
 
            fileReader.readAsDataURL(file);
        }
	}

	async function doSendMessage() {
		const form = document.getElementById("form-send-message")
		var message = form.message.value;

		var originalClass = form.submit.querySelector("i").className;
		form.submit.querySelector("i").className = "fa fa-spinner fa-spin";
		form.submit.setAttribute("disabled", "disabled");

		var ajax = new XMLHttpRequest();
		if (selectedFriend != null) {
			ajax.open("POST", "/sendMessage", true)
		} else if (selectedGroup != null) {
			ajax.open("POST", "/sendGroupMessage", true)
		}

		ajax.onreadystatechange = async function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText);
					var response = JSON.parse(this.responseText);
					// console.log(response);

					form.submit.querySelector("i").className = originalClass;
					form.submit.removeAttribute("disabled");

					if (response.status == "success") {
						if (selectedFriend != null) {
							const derivedKey = await getDerivedKey(privateKey, publicKey)
							var html = await renderMessage(response.data, derivedKey)
						} else if (selectedGroup != null) {
							var html = renderGroupMessage(response.data);
						}

						document.getElementById("msg_history").innerHTML += html;
						// document.body.scrollTop = document.getElementById("msg_history").scrollHeight;

						// attachedImages = []
						// attachedVideos = []

						// document.getElementById("preview-attached-images").innerHTML = "";
						// document.getElementById("preview-attached-videos").innerHTML = "";

						form.reset()
					} else {
						swal("Error", response.message, "error");
					}
				}

				if (this.status == 500) {
					console.log(this.responseText);
				}
			}
		};

		var formData = new FormData(form)
		formData.append("accessToken", localStorage.getItem("accessToken"))
		if (selectedFriend != null) {
			formData.append("_id", selectedFriend._id)

			const derivedKey = await getDerivedKey(privateKey, publicKey)

			const encodedText = new TextEncoder().encode(message)
			const iv = new TextEncoder().encode(new Date().getTime())
			const encryptedData = await window.crypto.subtle.encrypt(
				{ name: "AES-GCM", iv: iv },
				derivedKey,
				encodedText
			)
			const uintArray = new Uint8Array(encryptedData)
			const string = String.fromCharCode.apply(null, uintArray)
			const base64Data = btoa(string)
			const b64encodedIv = btoa(new TextDecoder("utf8").decode(iv))

			formData.append("messageEncrypted", base64Data)
			formData.append("iv", b64encodedIv)
		} else if (selectedGroup != null) {
			formData.append("_id", selectedGroup._id)
		}

		ajax.send(formData)
	}

	async function getDerivedKey(privateKey, publicKey) {
		const publicKeyObj = await window.crypto.subtle.importKey(
			"jwk",
			publicKey,
			{
				name: "ECDH",
				namedCurve: "P-256",
			},
			true,
			[]
		)

		const privateKeyObj = await window.crypto.subtle.importKey(
			"jwk",
			privateKey,
			{
				name: "ECDH",
				namedCurve: "P-256",
			},
			true,
			["deriveKey", "deriveBits"]
		)

		const derivedKey = await window.crypto.subtle.deriveKey(
			{ name: "ECDH", public: publicKeyObj },
			privateKeyObj,
			{ name: "AES-GCM", length: 256 },
			true,
			["encrypt", "decrypt"]
		)

		return derivedKey
	}

	let publicKey = ""
	let privateKey = ""

	function sendMessage() {
		event.preventDefault()

		if (selectedFriend == null && selectedGroup == null) {
			alert("Please select a recipient.")
			return
		}

		if (selectedFriend == null && selectedGroup != null) {
			doSendMessage()
		} else if (selectedFriend != null) {
			if (publicKey == "" || privateKey == "") {
				const formData = new FormData()
				formData.append("user", selectedFriend._id)
				formData.append("accessToken", localStorage.getItem("accessToken"))

				const ajax = new XMLHttpRequest()
				ajax.open("POST", "/getKeys", true)
				ajax.onreadystatechange = function () {
					if (this.readyState == 4 && this.status == 200) {
					    const response = JSON.parse(this.responseText)
					    if (response.status == "success") {
					    	// privateKey = JSON.parse(response.privateKey)
						    // publicKey = JSON.parse(response.publicKey)
						    doSendMessage()
					    } else {
					    	swal("Error", response.message, "error")
					    }
					}
				}

				ajax.send(formData)
			} else {
				doSendMessage()
			}
		}
	}

	function fetchGroupsForChat() {
		var ajax = new XMLHttpRequest();
		ajax.open("POST", "/fetchGroupsForChat", true);

		ajax.onreadystatechange = function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText)
					const response = JSON.parse(this.responseText)
					// console.log(response)

					if (response.status == "error") {
						swal("Error", response.message, "error")
					} else if (response.status == "success") {
						let html = ""

						groups = response.groups

						for (var a = 0; a < response.groups.length; a++) {
							const data = response.groups[a]
							html += renderSingleGroup(data)
						}
						document.getElementById("friends").innerHTML += html
					}
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		}

		const formData = new FormData()
		formData.append("accessToken", localStorage.getItem("accessToken"))
		ajax.send(formData)
	}

	function initializeEmoji() {
		$.fn.emoji = function (params) {
			var defaults = {
				button: '&#x1F642;',
				place: 'before',
				emojis: ['&#x1F642;', '&#x1F641;', '&#x1f600;', '&#x1f601;', '&#x1f602;', '&#x1f603;', '&#x1f604;', '&#x1f605;', '&#x1f606;', '&#x1f607;', '&#x1f608;', '&#x1f609;', '&#x1f60a;', '&#x1f60b;', '&#x1f60c;', '&#x1f60d;', '&#x1f60e;', '&#x1f60f;', '&#x1f610;', '&#x1f611;', '&#x1f612;', '&#x1f613;', '&#x1f614;', '&#x1f615;', '&#x1f616;', '&#x1f617;', '&#x1f618;', '&#x1f619;', '&#x1f61a;', '&#x1f61b;', '&#x1f61c;', '&#x1f61d;', '&#x1f61e;', '&#x1f61f;', '&#x1f620;', '&#x1f621;', '&#x1f622;', '&#x1f623;', '&#x1f624;', '&#x1f625;', '&#x1f626;', '&#x1f627;', '&#x1f628;', '&#x1f629;', '&#x1f62a;', '&#x1f62b;', '&#x1f62c;', '&#x1f62d;', '&#x1f62e;', '&#x1f62f;', '&#x1f630;', '&#x1f631;', '&#x1f632;', '&#x1f633;', '&#x1f634;', '&#x1f635;', '&#x1f636;', '&#x1f637;', '&#x1f638;', '&#x1f639;', '&#x1f63a;', '&#x1f63b;', '&#x1f63c;', '&#x1f63d;', '&#x1f63e;', '&#x1f63f;', '&#x1f640;', '&#x1f643;', '&#x1f4a9;', '&#x1f644;', '&#x2620;', '&#x1F44C;','&#x1F44D;', '&#x1F44E;', '&#x1F648;', '&#x1F649;', '&#x1F64A;'],
				fontSize: '20px',
				listCSS: {position: 'absolute', border: '1px solid gray', 'background-color': '#fff', display: 'none'},
				rowSize: 10,
			};
			var settings = {};
			if (!params) {
				settings = defaults;
			} else {
				for (var n in defaults) {
					settings[n] = params[n] ? params[n] : defaults[n];
				}
			}

			this.each(function (n, input) {
				var $input = $(input);

				function showEmoji() {
					$list.show();
					$input.focus();
					setTimeout(function () {
						$(document).on('click', closeEmoji);
					}, 1);
				}

				function closeEmoji() {
					$list.hide();
					$(document).off('click', closeEmoji);
				}

				function clickEmoji(ev) {
					if (input.selectionStart || input.selectionStart == '0') {
						var startPos = input.selectionStart;
						var endPos = input.selectionEnd;
						input.value = input.value.substring(0, startPos)
							+ ev.currentTarget.innerHTML
							+ input.value.substring(endPos, input.value.length);
					} else {
						input.value += ev.currentTarget.innerHTML;
					}

					closeEmoji();
					$input.focus();
					input.selectionStart = startPos + 2;
					input.selectionEnd = endPos + 2;
				}

				var $button = $("<span>").html(settings.button).css({cursor: 'pointer', 'font-size': settings.fontSize}).on('click', showEmoji);
				var $list = $('<div>').css(defaults.listCSS).css(settings.listCSS);
				for (var n in settings.emojis) {
					if (n > 0 && n % settings.rowSize == 0) {
						$("<br>").appendTo($list);
					}
					$("<span>").html(settings.emojis[n]).css({cursor: 'pointer', 'font-size': settings.fontSize}).on('click', clickEmoji).appendTo($list);
				}

				if (settings.place === 'before') {
					$button.insertBefore(this);
				} else {
					$button.insertAfter(this);
				}
				$list.insertAfter($input);
			});
			return this;
		}
		$('#message').emoji({place: 'after'})
	}

	function onclick_viewImage(self) {
		var html = "<img src='" + self.getAttribute("src") + "' />";
		document.querySelector("#viewImageModal .modal-body").innerHTML = html;
		$("#viewImageModal").modal("show");
	}

	function groupSelected(self) {
		const chat_list = document.querySelectorAll(".chat_list")
		for (let a = 0; a < chat_list.length; a++) {
			chat_list[a].className = "chat_list"
		}

		var _id = self.getAttribute("data-id")
		self.className = "chat_list active"

		var index = groups.findIndex(function(friend) {
			return friend._id == _id
		})
		selectedGroup = groups[index];
		selectedFriend = null

		document.getElementById("msg_history").innerHTML = ""

		var ajax = new XMLHttpRequest();
		ajax.open("POST", "/getGroupChat", true);

		ajax.onreadystatechange = function() {
			if (this.readyState == 4) {

				if (this.status == 200) {
					const response = JSON.parse(this.responseText)
					// console.log(response)

					var html = "";
					for (var a = 0; a < response.data.length; a++) {
						var inbox = response.data[a]
						html = renderGroupMessage(inbox) + html
					}
					document.getElementById("msg_history").innerHTML = html;

					document.getElementById("section-invite-member-modal").style.display = ""

					if (selectedGroup.createdBy._id.toString() == window.user._id.toString()) {
						document.getElementById("btn-delete-group").style.display = ""
					} else {
						document.getElementById("btn-delete-group").style.display = "none"
					}

					document.getElementById("qr-code-link").setAttribute("href", mainURL + "/joinGroupChat/" + _id)

					html = ""
					selectedGroup.members.reverse()

					for (let a = 0; a < selectedGroup.members.length; a++) {
						const member = selectedGroup.members[a]
						html += renderGroupMemberInMembersList(member)
					}
					document.querySelector("#viewMembersModal tbody").innerHTML = html

					try {
						self.querySelector(".unread").remove()
					} catch (exp) {}

					// document.body.scrollTop = document.getElementById("msg_history").scrollHeight;
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		};

		var formData = new FormData();
		formData.append("accessToken", localStorage.getItem("accessToken"));
		formData.append("_id", _id);
		ajax.send(formData);
	}

	function renderGroupMemberInMembersList(member) {
		let actionsHtml = ""
		if (member.user._id.toString() == window.user._id.toString()
			&& member.status == "Pending") {
			actionsHtml += `<form onsubmit="return acceptInvite(this)">
				<input type="hidden" name="_id" value="` + member._id + `" />
				<button type="submit" name="submit" class="mtr-btn">
					<span>Accept</span>
				</button>
			</form>`
		}

		if (selectedGroup.createdBy._id.toString() == window.user._id.toString()
			&& member.user._id.toString() != window.user._id.toString()) {
			actionsHtml += `<form onsubmit="return deleteMember(this)">
				<input type="hidden" name="_id" value="` + member._id + `" />
				<button type="submit" name="submit" class="mtr-btn">
					<span>Delete</span>
				</button>
			</form>`
		}

		const html = `<tr>
			<td>
				<a href="` + mainURL + `/user/` + member.user._id + `">` + member.user.name + `</a>
			</td>

			<td>` + member.status + `</td>
			<td>` + new Date(member.createdAt) + `</td>
			<td>` + actionsHtml + `</td>
		</tr>`

		return html
	}
	

	function renderGroupMessage(message) {
		if (message.isDeleted) {
			return ""
		}

		var html = ""

		let messageContent = message.message == null ? "" : message.message
		const dateObj = new Date(message.createdAt)

		let attachmentsHtml = ""

		if (message.savedPaths != null) {
			attachmentsHtml += `<div class="gridAttachments">`
			for (let a = 0; a < message.savedPaths.length; a++) {
				
				if (a == 4) {
					break
				}

				const parts = message.savedPaths[a].split(".")
				const extension = parts[parts.length - 1]
				if (extension == "jpg" || extension == "jpeg" || extension == "png") {
					html += `<img class="post-image" src="` + mainURL + "/" + message.savedPaths[a] + `" onerror="this.style.display = 'none'" />`
				} else if (extension == "mp4" || extension == "mov" || extension == "mkv") {
					html += `<video class="post-video" style="height: 359px; width: 100%;" controls src="` + mainURL + "/" + message.savedPaths[a] + `" onerror="this.style.display = 'none'"></video>`
				} else if (extension == "mp3" || extension == "m4a" || extension == "aac") {
					html += `<audio class="post-audio" controls src="` + mainURL + "/" + message.savedPaths[a] + `" id="audio-post-` + message._id + `"></audio> <div id="waveform-post-` + message._id + `" onerror="this.style.display = 'none'"></div>`
				}

				if (a == 3) {
					html += `<a style="display: contents;" href="` + mainURL + `/post/` + message._id + `">
						<div class="overlayAttachment">
							<div class="text">+</div>
						</div>
					</a>`
				}
			}
			attachmentsHtml += `</div>`
		}

		if (typeof message.voiceNote !== "undefined") {
			messageContent = "<audio controlsList='nodownload' style='width: 100%;' controls src='" + mainURL + "/" + message.voiceNote + "'></audio>"
		}

		const userHtml = `<a href="` + mainURL + `/user/` + message.user._id + `">` + message.user.name + `</a>`

		if (message.user._id == window.user._id) {

			html += `<div class="outgoing_msg" data-message-id="` + message._id + `">
				<div class="sent_msg">
					<p>` + messageContent + `</p>
					<span class="time_date"> ` + dateObj.getHours() + `:` + dateObj.getMinutes() + ` | ` + months[dateObj.getMonth()] + ` ` + dateObj.getDate() + `, ` + dateObj.getFullYear() + ` | ` + userHtml + `</span>`

			if (!message.isDeleted) {
				html += `<i class='fa fa-trash pull-right' data-id='` + message._id + `' onclick='deleteGroupMessage(this)'></i>`
			}

			html += attachmentsHtml

			html += `</div>
			</div>`
		} else {

			html += `<div class="incoming_msg" data-message-id="` + message._id + `">
				<div class="incoming_msg_img">
					
				</div>

				<div class="received_msg">
					<div class="received_withd_msg">
						<p>` + messageContent + `</p>
						<span class="time_date">` + dateObj.getHours() + `:` + dateObj.getMinutes() + ` | ` + months[dateObj.getMonth()] + ` ` + dateObj.getDate() + `, ` + dateObj.getFullYear() + ` | ` + userHtml + `</span>
					</div>

					` + attachmentsHtml + `
				</div>
			</div>`
		}

		return html
	}

	function deleteGroupMessage(self) {
		swal({
			title: "Eliminar mensaje",
			text: "¿Está seguro que quiere eliminar este mensaje?",
			icon: "warning",
			buttons: true,
			dangerMode: true,
		})
		.then(function (willDelete) {
			if (willDelete) {
				var _id = self.getAttribute("data-id");
				self.className = "fa fa-spinner fa-spin pull-right";

				var ajax = new XMLHttpRequest();
				ajax.open("POST", "/deleteGroupMessage", true);

				ajax.onreadystatechange = function() {
					if (this.readyState == 4 && this.status == 200) {
						var response = JSON.parse(this.responseText);
						self.className = "fa fa-trash pull-right";
						// self.parentElement.className = "text-muted";
						// self.parentElement.innerHTML = "<i>This message has been deleted</i>";
						self.parentElement.remove()
					}
				};

				var formData = new FormData();
				formData.append("accessToken", localStorage.getItem("accessToken"));
				formData.append("_id", _id);
				ajax.send(formData);
			}
		});
	}

	function renderSingleGroup(data) {

		let badgeUnread = ""
		if (data.unread && data.unread > 0) {
			badgeUnread = `<span class="badge unread" style="background-color: #7EC352; color: white;">` + data.unread + `</span>`
		}

		const image = data.savedPaths.length > 0 ? data.savedPaths[0] : ""

		const html = `<div class="chat_list" data-id="` + data._id + `" data-group-id="` + data._id + `" onclick="groupSelected(this);" style="cursor: pointer;">
				<div class="chat_people">
					<div class="chat_img">
						<img src="` + mainURL + `/` + image + `" alt="sunil" onerror="this.src = \'/public/img/default_profile.jpg\';" />
					</div>

					<div class="chat_ib">
						<h5>` + data.name + `
							<span style='color: #5093ce;'>Group</span>
							` + badgeUnread + `
						</h5>
					</div>
				</div>
			</div>`
		return html
	}

	function createGroup() {
		event.preventDefault()

		const form = document.getElementById("form-create-group")
		form.submit.setAttribute("disabled", "disabled")

		var ajax = new XMLHttpRequest();
		ajax.open("POST", "/createGroupForChat", true);

		ajax.onreadystatechange = function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					// console.log(this.responseText)
					const response = JSON.parse(this.responseText)

					form.submit.removeAttribute("disabled")

					if (response.status == "error") {
						swal("Error", response.message, "error")
					} else if (response.status == "success") {
						swal("Success", response.message, "success")
							.then(function () {
								window.location.reload()
							})
						// $("#createGroupModal").modal("hide")
						// form.reset()

						// const html = renderSingleGroup(response.group)
						// document.getElementById("friends").innerHTML = html + document.getElementById("friends").innerHTML
						// friends.push(response.group)
					}
				}

				if (this.status == 500) {
					console.log(this.responseText)
				}
			}
		}

		const formData = new FormData(form)
		formData.append("accessToken", localStorage.getItem("accessToken"))
		ajax.send(formData)
	}

	async function renderMessage(message, derivedKey = null) {
		if (message.is_deleted) {
			return ""
		}

		var html = ""

		let messageContent = message.message == null ? "" : message.message
		const dateObj = new Date(message.createdAt)
		let attachmentsHtml = ""

		if (typeof message.voiceNote === "undefined" && !message.is_deleted && derivedKey != null) {
			const iv = new Uint8Array(atob(message.iv).split("").map(function(c) {
	            return c.charCodeAt(0)
	        }))
	        const initializationVector = new Uint8Array(iv).buffer
	        const string = atob(messageContent)
	        const uintArray = new Uint8Array(
	            [...string].map((char) => char.charCodeAt(0))
	        )
	        const decryptedData = await window.crypto.subtle.decrypt(
	            {
	                name: "AES-GCM",
	                iv: initializationVector,
	            },
	            derivedKey,
	            uintArray
	        )
	        messageContent = new TextDecoder().decode(decryptedData)
		}

		if (message.savedPaths != null) {
			attachmentsHtml += `<div class="gridAttachments">`
			for (let a = 0; a < message.savedPaths.length; a++) {
				
				if (a == 4) {
					break
				}

				const parts = message.savedPaths[a].split(".")
				const extension = parts[parts.length - 1]
				if (extension == "jpg" || extension == "jpeg" || extension == "png") {
					html += `<img class="post-image" src="` + mainURL + "/" + message.savedPaths[a] + `" onerror="this.style.display = 'none'" />`
				} else if (extension == "mp4" || extension == "mov" || extension == "mkv") {
					html += `<video class="post-video" style="height: 359px; width: 100%;" controls src="` + mainURL + "/" + message.savedPaths[a] + `" onerror="this.style.display = 'none'"></video>`
				} else if (extension == "mp3" || extension == "m4a" || extension == "aac") {
					html += `<audio class="post-audio" controls src="` + mainURL + "/" + message.savedPaths[a] + `" id="audio-post-` + message._id + `"></audio> <div id="waveform-post-` + message._id + `" onerror="this.style.display = 'none'"></div>`
				}

				if (a == 3) {
					html += `<a style="display: contents;" href="` + mainURL + `/post/` + message._id + `">
						<div class="overlayAttachment">
							<div class="text">+</div>
						</div>
					</a>`
				}
			}
			attachmentsHtml += `</div>`
		}

		/*let attachmentsHtml = ""

		for (var a = 0; a < message.images.length; a++) {
			attachmentsHtml += `<img src='` + mainURL + `/` + message.images[a] + `' class='attached-image' onclick='onclick_viewImage(this);' />`;
		}

		for (var a = 0; a < message.videos.length; a++) {
			attachmentsHtml += `<video src='` + mainURL + `/` + message.videos[a] + `' controls style='    width: 100%;'></video>`;
		}*/

		if (typeof message.voiceNote !== "undefined") {
			messageContent = "<audio controlsList='nodownload' style='width: 100%;' controls src='" + mainURL + "/" + message.voiceNote + "'></audio>"
		}

		if (message.from == window.user._id) {

			if (message.is_deleted) {
				messageContent = `<p style="color: white;"><i>This message has been deleted.</i></p>`
			}

			html += `<div class="outgoing_msg" data-message-id="` + message._id + `">
				<div class="sent_msg">
					<p>` + messageContent + `</p>
					<span class="time_date"> ` + dateObj.getHours() + `:` + dateObj.getMinutes() + ` | ` + months[dateObj.getMonth()] + ` ` + dateObj.getDate() + `, ` + dateObj.getFullYear() + `</span>`

			if (!message.is_deleted) {
				html += `<i class='fa fa-trash pull-right' data-id='` + message._id + `' onclick='deleteMessage(this)'></i>`
			}

			html += attachmentsHtml

			html += `</div>
			</div>`
		} else {
			if (message.is_deleted) {
				messageContent = `<p><i>This message has been deleted.</i></p>`
			}

			html += `<div class="incoming_msg" data-message-id="` + message._id + `">
				<div class="incoming_msg_img">
					
				</div>

				<div class="received_msg">
					<div class="received_withd_msg">
						<p>` + messageContent + `</p>
						<span class="time_date">` + dateObj.getHours() + `:` + dateObj.getMinutes() + ` | ` + months[dateObj.getMonth()] + ` ` + dateObj.getDate() + `, ` + dateObj.getFullYear() + `</span>
					</div>

					` + attachmentsHtml + `
				</div>
			</div>`
		}

		return html
	}

	function deleteMessage(self) {
		swal({
			title: "Eliminar mensaje",
			text: "¿Está seguro que quiere eliminar este mensaje?",
			icon: "warning",
			buttons: true,
			dangerMode: true,
		})
		.then((willDelete) => {
			if (willDelete) {
				var _id = self.getAttribute("data-id");
				self.className = "fa fa-spinner fa-spin pull-right";

				var ajax = new XMLHttpRequest();
				ajax.open("POST", "/deleteMessage", true);

				ajax.onreadystatechange = function() {
					if (this.readyState == 4 && this.status == 200) {
						var response = JSON.parse(this.responseText);
						self.className = "fa fa-trash pull-right";
						// self.parentElement.className = "text-muted";
						// self.parentElement.innerHTML = "<i>This message has been deleted</i>";
						self.parentElement.remove()
					}
				};

				var formData = new FormData();
				formData.append("accessToken", localStorage.getItem("accessToken"));
				formData.append("_id", _id);
				ajax.send(formData);
			}
		});
	}

	function showFriends() {
		var html = "";
		// friends = window.user.friends;
        friends = [];

        // Adding friends who has unread messages
        for (var a = 0; a < window.user.friends.length; a++) {
            for (var b = 0; b < window.user.friends[a].inbox.length; b++) {
                if (window.user.friends[a].inbox[b].is_read) {
                    friends.push(window.user.friends[a]);
                    break;
                }
            }
        }

        // Adding friends who has read messages
        for (var a = 0; a < window.user.friends.length; a++) {
            var flag = false;
            for (var b = 0; b < friends.length; b++) {
                if (friends[b]._id.toString() == window.user.friends[a]._id.toString()) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                friends.push(window.user.friends[a]);
            }
        }

		for (var a = 0; a < friends.length; a++) {
			var data = friends[a];

			if (data.status == "Pending") {
				continue
			}

			html += renderSingleFriend(data)
		}
		document.getElementById("friends").innerHTML += html

		connectSocket()
	}

	function renderSingleFriend(data) {

		let badgeUnread = ""
		if (data.unread && data.unread > 0) {
			badgeUnread = `<span class="badge unread" style="background-color: #7EC352; color: white;">` + data.unread + `</span>`
		}

		const html = `<div class="chat_list" data-id="` + data._id + `" onclick="friendSelected(this);" style="cursor: pointer;">
				<div class="chat_people">
					<div class="chat_img">
						<img src="` + mainURL + `/` + data.profileImage + `" alt="sunil" onerror="this.src = \'/public/img/default_profile.jpg\';" />
					</div>

					<div class="chat_ib">
						<h5>` + data.name + `
							` + badgeUnread + `
						</h5>
					</div>
				</div>
			</div>`
		return html
	}

	function friendSelected(self) {
		const chat_list = document.querySelectorAll(".chat_list")
		for (let a = 0; a < chat_list.length; a++) {
			chat_list[a].className = "chat_list"
		}
		

		var _id = self.getAttribute("data-id")
		self.className = "chat_list active"

		var index = friends.findIndex(function(friend) {
			return friend._id == _id
		});
		selectedFriend = friends[index];
		selectedGroup = null

		var ajax = new XMLHttpRequest();
		ajax.open("POST", "/getFriendsChat", true);

		ajax.onreadystatechange = async function() {
			if (this.readyState == 4 && this.status == 200) {

				document.getElementById("section-invite-member-modal").style.display = "none"
				document.getElementById("btn-delete-group").style.display = "none"

				var response = JSON.parse(this.responseText)

				if (response.status == "success") {
					privateKey = response.privateKey
					publicKey = response.publicKey
					const derivedKey = await getDerivedKey(privateKey, publicKey)

					var html = "";
					for (var a = 0; a < response.data.length; a++) {
						var inbox = response.data[a]
						html += await renderMessage(inbox, derivedKey)
					}
					document.getElementById("msg_history").innerHTML = html;

					try {
						self.querySelector(".unread").remove()
					} catch (exp) {}

					// document.body.scrollTop = document.getElementById("msg_history").scrollHeight;
				} else {
					swal("Error", response.message, "error")
				}
			}
		};

		var formData = new FormData();
		formData.append("accessToken", localStorage.getItem("accessToken"));
		formData.append("_id", _id);
		ajax.send(formData);
	}

	function connectSocket() {
		var ajax = new XMLHttpRequest();
		ajax.open("POST", "/connectSocket", true);

		ajax.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				var response = JSON.parse(this.responseText);

				socketIO.on("messageReceived", async function (messageObj) {
					if (selectedFriend != null && messageObj.from == selectedFriend._id) {
						var html = "";

						const derivedKey = await getDerivedKey(privateKey, publicKey)
						var html = await renderMessage(messageObj, derivedKey)
						document.getElementById("msg_history").innerHTML += html;

						// var objDiv = document.getElementById("msg_history");
						// objDiv.scrollTop = objDiv.scrollHeight;
					}
				});

				socketIO.on("messageDeleted", function (data) {
					if (document.querySelector("li[data-message-id='" + data._id + "']") != null) {
						document.querySelector("li[data-message-id='" + data._id + "']").innerHTML = "<p class='text-muted'><i>This message has been deleted.</i></p>";
					};
				});
			}
		};

		var formData = new FormData();
		formData.append("accessToken", localStorage.getItem("accessToken"));
		ajax.send(formData);
	}
</script>

<%- include ("includes/footer") %>